#include <iostream>
#include <vector>

#include <opencv2/core.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>

using namespace std;
using namespace cv;

Mat img, gray, blurred, edge;
// Laplacian Operator Variables
//int kernel_size = 3;
//int ddepth = CV_16S;

// Canny Edge Detection Variables
int lowerThreshold = 0;
int max_lowThreshold = 1000;

//void laplacianDetection() {
//
//    GaussianBlur(gray,
//        blurred,
//        cv::Size(3, 3),  // smoothing window width and height in pixels
//        3);              // how much the image will be blurred
//
//    Laplacian(blurred,
//        edge,
//        ddepth,         // Depth of the destination image
//        kernel_size);    // Size of the kernel
//
//    // converting back to CV_8U
//    convertScaleAbs(edge, edge);
//}


void CannyThreshold(int, void*) {

    GaussianBlur(gray,blurred, Size(3, 3), 3);
        // smoothing window width and height in pixels
     
    // how much the image will be blurred

    Canny(blurred,edge, lowerThreshold, 50);   // lower threshold
             // higher threshold

    imshow("Edge Detection", edge);
}



int main() {

    img = imread("/12.jpg");

    if (img.empty())
    {
        cout << "Could not open or find the image!" << endl;
        return -1;
    }

    cvtColor(img, gray, COLOR_BGR2GRAY);

    cv::namedWindow("Original", WINDOW_AUTOSIZE);
    cv::namedWindow("Gray", WINDOW_AUTOSIZE);
    cv::namedWindow("Blurred", WINDOW_AUTOSIZE);
    cv::namedWindow("Edge Detection", WINDOW_AUTOSIZE);

   

    // Canny Edge Detector
    createTrackbar("Min Threshold:", "Edge Detection", &lowerThreshold, max_lowThreshold, CannyThreshold);
    CannyThreshold(0, 0);

    // Laplacian Edge Detector
    //laplacianDetection();
  
    int down_width = 50;
    int down_height = 50;
    Mat resize_down;

    // resize down
    resize(img, resize_down, Size(down_width, down_height), INTER_LINEAR);
    resize(gray, resize_down, Size(down_width, down_height), INTER_LINEAR);
    resize(blurred, resize_down, Size(down_width, down_height), INTER_LINEAR);

    imshow("Original", img);
    imshow("Gray", gray);
    imshow("Blurred", blurred);
    //imshow("Edge Detection", edge);

    waitKey(0);



    return 0;
}
